###############################################################################
# NXLOG Configuration for Bro-KEN SIEM v1.0                                   #
# Linux Default Configuration for Receiver - Version 1.0                      #
# Created by Evan Davison - Nov, 2014                                         #
# Requires NXLOG version 2.8.1248 or greater                                  #
###############################################################################

########################################
# Global directives                    #
########################################
User nxlog
Group nxlog

define CERTDIR /etc/nxlog/ssl
define CONFDIR /etc/nxlog/nxlog
define LOGDIR /var/log/nxlog
define LOGFILE %LOGDIR%/nxlog.log
define ESLOGFILE /var/log/elasticsearch/brokensiem.log

# Default Values:
# PidFile /var/run/nxlog/nxlog.pid
# CacheDir /var/spool/nxlog
# ModuleDir /lib/nxlog/modules
SpoolDir /var/spool/nxlog
LogFile %LOGFILE%
LogLevel INFO

########################################
# Application Configuration Includes   #
########################################

# include %CONFDIR%/bro_app_stats.conf
# include %CONFDIR%/bro_conn.conf
# include %CONFDIR%/bro_dhcp.conf
# include %CONFDIR%/bro_dns.conf
# include %CONFDIR%/bro_dpd.conf
# include %CONFDIR%/bro_files.conf
# include %CONFDIR%/bro_http.conf
# include %CONFDIR%/bro_notice.conf
# include %CONFDIR%/bro_smtp.conf
# include %CONFDIR%/bro_software.conf
# include %CONFDIR%/bro_ssh.conf
# include %CONFDIR%/bro_ssl.conf
# include %CONFDIR%/bro_syslog.conf
# include %CONFDIR%/bro_weird.conf
# include %CONFDIR%/bro_x509.conf
# include %CONFDIR%/linux_audit.conf

########################################
# Global Extensions                    #
########################################

<Extension charconv>
    Module	xm_charconv
    AutodetectCharsets	utf-8, utf-16, utf-32
</Extension>

<Extension _syslog>
    Module	xm_syslog
    IETFTimestampInGMT	TRUE
</Extension>

<Extension _json>
    Module	xm_json
</Extension>

<Extension _exec>
    Module	xm_exec
</Extension>

########################################
# Sagan Output Extension               #
########################################

<Extension _sagan>
    Module	xm_csv
    Fields  $Hostname,$SyslogFacilityValue,$SyslogSeverity,$Severity,$SourceModuleName,$Date,$Time,$SourceName,$raw_event
    Delimiter |
    QuoteMethod	None
</Extension>

########################################
# Processors                           #
########################################

<Processor buffer_es>
    #Primary on-disk buffer for non-tcp sources
    Module	pm_buffer
    #Create 1GB temporary buffer
    MaxSize	1073741824
    #Warn at .5GB used
    WarnLimit	536870912
    Type	disk
    #Alternate route if primary failure if secondary configured
#     Exec	if buffer_count() > 2 reroute("secondary") \
# 	{\
# 	  log_warning("NXLOG internal log messages in past 1 hour"); \
# 	}
</Processor>

<Processor buffer_sagan>
    #Primary on-disk buffer for non-tcp sources
    Module	pm_buffer
    #Create 1GB temporary buffer
    MaxSize	1073741824
    #Warn at .5GB used
    WarnLimit	536870912
    Type	disk
    #Alternate route if primary failure if secondary configured
#     Exec	if buffer_count() > 2 reroute("secondary") \
# 	{\
# 	  log_warning("NXLOG internal log messages in past 1 hour"); \
# 	}
</Processor>

########################################
# NXLOG Internal Logging               #
########################################

<Input internal>
    Module	im_internal
    Exec	$Hostname = host_ip(); \
		$FQDN = hostname_fqdn(); \
		$tag = "internal"; \
		$SourceName = "nxlog"; \
		to_syslog_ietf(); to_json();
    <Schedule>
  #Hourly NXLOG rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("nxhourly") \
  {\
    log_warning(get_stat("nxhourly") + " NXLOG internal log messages in past 1 hour"); \
  }
     </Schedule>
</Input>

########################################
# NXLOG Log Rotation                   #
########################################

<Extension _fileop>
    Module	xm_fileop

    # Rotate NXLOG log file every day at midnight
    <Schedule>
  When    @daily
  Exec    if file_exists(%LOGFILE%) file_cycle(%LOGFILE%, 8);
    </Schedule>
    
#     # Rotate BroKEN SIEM ElasticSearch log file every day at midnight
#     <Schedule>
#   When    @daily
#   Exec    if file_exists(%ESLOGFILE%) file_cycle(%ESLOGFILE%, 8);
#     </Schedule>
</Extension>

########################################
# INPUT SSL Port 1516 (Syslog-TLS)     #
########################################

<Input ssl_in>
    Module  im_ssl
    Host  0.0.0.0
    Port  1516
    CertFile  /etc/nxlog/ssl/nxlog.crt
    CertKeyFile /etc/nxlog/ssl/nxlog.key
    RequireCert	FALSE
    AllowUntrusted TRUE
    FlowControl	TRUE
    Exec	convert_fields("AUTO", "utf-8");
    Exec	create_stat("sslhourly", "RATE", 3600); add_stat("sslhourly", 1);
    Exec	create_stat("sslrate", "RATE", 1800); add_stat("sslrate", 1);
    <Schedule>
  #Hourly SSL rate monitoring
  Every	3600 sec
  Exec	if defined get_stat("sslhourly") \
  {\
    log_warning(get_stat("sslhourly") + " messages received from input SSL:1516 in past 1 hour"); \
  }
    </Schedule>
    <Schedule>
  #30 Minute SSL rate monitoring for dropped source
  Every	1800 sec
  Exec	if defined get_stat("sslrate") and get_stat("sslrate") <= 1 \
  {\
    log_warning("No messages received from input SSL:1514 for 30 minutes!"); \
  }
    </Schedule>
</Input>

########################################
# INPUT TCP Port 514 (Syslog)          #
########################################

<Input tcp_in>
    Module	im_tcp
    Host	0.0.0.0
    Port	514
    FlowControl	TRUE
    Exec	parse_syslog(); to_syslog_ietf(); to_json();
    Exec	create_stat("tcphourly", "RATE", 3600); add_stat("tcphourly", 1);
    Exec	create_stat("tcprate", "RATE", 1800); add_stat("tcprate", 1);
    <Schedule>
  #Hourly TCP rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("tcphourly") \
  {\
    log_warning(get_stat("tcphourly") + " messages received from input TCP:514 in past 1 hour"); \
  }
     </Schedule>
     <Schedule>
  #30 Minute TCP rate monitoring for dropped source
  Every		1800 sec
  Exec		if defined get_stat("tcprate") and get_stat("tcprate") <= 1 \
  {\
    log_warning("No messages received from input TCP:514 for 30 minutes!"); \
  }
     </Schedule>
</Input>

########################################
# INPUT UDP Port 514 (Syslog)          #
########################################

<Input udp_in>
    Module	im_udp
    Host	0.0.0.0
    Port	514
    Exec	parse_syslog(); to_syslog_ietf(); to_json();
    Exec	create_stat("udphourly", "RATE", 3600); add_stat("udphourly", 1);
    Exec	create_stat("udprate", "RATE", 1800); add_stat("udprate", 1);
    <Schedule>
  #Hourly UDP rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("udphourly") \
  {\
    log_warning(get_stat("udphourly") + " messages received from input UDP:514 in past 1 hour"); \
  }
     </Schedule>
     <Schedule>
  #30 Minute UDP rate monitoring for dropped source
  Every		1800 sec
  Exec		if defined get_stat("udprate") and get_stat("udprate") <= 1 \
  {\
    log_warning("No messages received from input UDP:514 for 30 minutes!"); \
  }
     </Schedule>
</Input>

##############################################
# OUTPUT ElasticSearch HTTP Module           #
##############################################

# <Output elasticsearch>
#     Module	om_http
#     URL		http://127.0.0.1:9200/
#     ContentType	'application/json'
#     Exec	set_http_request_path("logstash-" + year(now()) + "." + month(now()) + "." + day(now()) + "/logs/");
# #    Exec	if $raw_event =~ /^{/ parse_json(); else parse_syslog();
# #    Exec	to_syslog_ietf();
#     Exec	parse_json();
# #    Exec	if not defined $EventTime $EventTime = now(); rename_field("EventTime", "@timestamp");
#     Exec	rename_field("EventTime", "@timestamp");
#     Exec	to_json();
#     Exec	create_stat("eshourly", "RATE", 3600); add_stat("eshourly", 1);
#     <Schedule>
#   #Hourly TCP rate monitoring
#   Every		3600 sec
#   Exec		if defined get_stat("eshourly") \
#   {\
#     log_warning(get_stat("eshourly") + " messages forwarded to ElasticSearch in past 1 hour"); \
#   }
#     </Schedule>
# </Output>

##############################################
# OUTPUT ElasticSearch Bulk Module           #
##############################################

<Output elastic_bulk>
    Module	om_elasticsearch
    URL		http://127.0.0.1:9200/_bulk
    FlushInterval	2
    FlushLimit	100
    Index	"logstash-" + year(now()) + "." + month(now()) + "." + day(now())
    IndexType	$SourceModuleName + "." + $SourceName
    Exec	parse_json();
    Exec	if not defined $SourceName $SourceName = 'unknown';
    Exec	if not defined $EventTime $EventTime = now();
    Exec	rename_field("EventTime", "@timestamp");
    Exec	to_json();
    Exec	create_stat("esbulk_hourly", "RATE", 3600); add_stat("esbulk_hourly", 1);
    <Schedule>
  #Hourly TCP rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("esbulk_hourly") \
  {\
    log_warning(get_stat("esbulk_hourly") + " messages forwarded to ElasticSearch_BULK in past 1 hour"); \
  }
    </Schedule>
</Output>

##############################################
# OUTPUT Sagan                               #
##############################################

# <Output sagan>
#     Module	om_file
#     File	'/var/run/sagan.fifo'
#     OutputType	LineBased
#     Exec	$date = year(now()) + "-" + month(now()) + "-" + day(now()) ;\
#     		$time = hour(now()) + ":" + minute(now()) + ":" + second(now());\
#     		_sagan->to_csv();
#     Exec	create_stat("saganhourly", "RATE", 3600); add_stat("saganhourly", 1);
#     <Schedule>
#   #Hourly TCP rate monitoring
#   Every		3600 sec
#   Exec		if defined get_stat("saganhourly") \
#   {\
#     log_warning(get_stat("saganhourly") + " messages forwarded to Sagan in past 1 hour"); \
#   }
#     </Schedule>
# </Output>

# <Output sagan_file>
#     Module      om_file
#     File	'/tmp/sagan/test.log'
#     OutputType  LineBased
#     Exec        $date = year(now()) + "-" + month(now()) + "-" + day(now()) ;\
#                 $time = hour(now()) + ":" + minute(now()) + ":" + second(now());\
#                 _sagan->to_csv();
# </Output>

########################################
# Default Route                        #
########################################

<Route ElasticSearch>
    #Primary route for log search
    Path	internal, ssl_in, tcp_in, udp_in => buffer_es => elastic_bulk
</Route>

#<Route Internal>
#    #Separate output for error logging
#    Path	internal => elastic_bulk
#</Route>

#<Route Sagan>
#    #Primary route for log processing
#    Path	internal, ssl_in, tcp_in, udp_in => buffer_sagan => sagan, sagan_file
#</Route>